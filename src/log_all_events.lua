local Event = require('__stdlib__/stdlib/event/event')

local function log_event(event)
 log(("event: %s"):format(serpent.line(event)))
 local entity = event.created_entity or event.entity or event.destination
 if entity ~= nil then
  log(("entity: [%s] %s %s @ %s"):format(
    entity.unit_number, entity.name, entity.type, serpent.line(entity.position)))
 end
end

Event.register(defines.events.on_ai_command_completed, log_event)
Event.register(defines.events.on_area_cloned, log_event)
Event.register(defines.events.on_biter_base_built, log_event)
Event.register(defines.events.on_brush_cloned, log_event)
Event.register(defines.events.on_build_base_arrived, log_event)
Event.register(defines.events.on_built_entity, log_event)
Event.register(defines.events.on_cancelled_deconstruction, log_event)
Event.register(defines.events.on_cancelled_upgrade, log_event)
Event.register(defines.events.on_character_corpse_expired, log_event)
Event.register(defines.events.on_chart_tag_added, log_event)
Event.register(defines.events.on_chart_tag_modified, log_event)
Event.register(defines.events.on_chart_tag_removed, log_event)
Event.register(defines.events.on_chunk_charted, log_event)
Event.register(defines.events.on_chunk_deleted, log_event)
Event.register(defines.events.on_chunk_generated, log_event)
Event.register(defines.events.on_combat_robot_expired, log_event)
Event.register(defines.events.on_console_chat, log_event)
Event.register(defines.events.on_console_command, log_event)
Event.register(defines.events.on_cutscene_cancelled, log_event)
Event.register(defines.events.on_cutscene_finished, log_event)
Event.register(defines.events.on_cutscene_started, log_event)
Event.register(defines.events.on_cutscene_waypoint_reached, log_event)
Event.register(defines.events.on_difficulty_settings_changed, log_event)
Event.register(defines.events.on_entity_cloned, log_event)
Event.register(defines.events.on_entity_color_changed, log_event)
Event.register(defines.events.on_entity_damaged, log_event)
Event.register(defines.events.on_entity_destroyed, log_event)
Event.register(defines.events.on_entity_died, log_event)
Event.register(defines.events.on_entity_logistic_slot_changed, log_event)
Event.register(defines.events.on_entity_renamed, log_event)
Event.register(defines.events.on_entity_settings_pasted, log_event)
Event.register(defines.events.on_entity_spawned, log_event)
Event.register(defines.events.on_equipment_inserted, log_event)
Event.register(defines.events.on_equipment_removed, log_event)
Event.register(defines.events.on_force_cease_fire_changed, log_event)
Event.register(defines.events.on_force_created, log_event)
Event.register(defines.events.on_force_friends_changed, log_event)
Event.register(defines.events.on_force_reset, log_event)
Event.register(defines.events.on_forces_merged, log_event)
Event.register(defines.events.on_forces_merging, log_event)
Event.register(defines.events.on_game_created_from_scenario, log_event)
Event.register(defines.events.on_gui_checked_state_changed, log_event)
Event.register(defines.events.on_gui_click, log_event)
Event.register(defines.events.on_gui_closed, log_event)
Event.register(defines.events.on_gui_confirmed, log_event)
Event.register(defines.events.on_gui_elem_changed, log_event)
Event.register(defines.events.on_gui_hover, log_event)
Event.register(defines.events.on_gui_leave, log_event)
Event.register(defines.events.on_gui_location_changed, log_event)
Event.register(defines.events.on_gui_opened, log_event)
Event.register(defines.events.on_gui_selected_tab_changed, log_event)
Event.register(defines.events.on_gui_selection_state_changed, log_event)
Event.register(defines.events.on_gui_switch_state_changed, log_event)
Event.register(defines.events.on_gui_text_changed, log_event)
Event.register(defines.events.on_gui_value_changed, log_event)
Event.register(defines.events.on_land_mine_armed, log_event)
Event.register(defines.events.on_lua_shortcut, log_event)
Event.register(defines.events.on_marked_for_deconstruction, log_event)
Event.register(defines.events.on_marked_for_upgrade, log_event)
Event.register(defines.events.on_market_item_purchased, log_event)
Event.register(defines.events.on_mod_item_opened, log_event)
Event.register(defines.events.on_permission_group_added, log_event)
Event.register(defines.events.on_permission_group_deleted, log_event)
Event.register(defines.events.on_permission_group_edited, log_event)
Event.register(defines.events.on_permission_string_imported, log_event)
Event.register(defines.events.on_picked_up_item, log_event)
Event.register(defines.events.on_player_alt_reverse_selected_area, log_event)
Event.register(defines.events.on_player_alt_selected_area, log_event)
Event.register(defines.events.on_player_ammo_inventory_changed, log_event)
Event.register(defines.events.on_player_armor_inventory_changed, log_event)
Event.register(defines.events.on_player_banned, log_event)
Event.register(defines.events.on_player_built_tile, log_event)
Event.register(defines.events.on_player_cancelled_crafting, log_event)
Event.register(defines.events.on_player_changed_force, log_event)
Event.register(defines.events.on_player_changed_position, log_event)
Event.register(defines.events.on_player_changed_surface, log_event)
Event.register(defines.events.on_player_cheat_mode_disabled, log_event)
Event.register(defines.events.on_player_cheat_mode_enabled, log_event)
Event.register(defines.events.on_player_clicked_gps_tag, log_event)
Event.register(defines.events.on_player_configured_blueprint, log_event)
Event.register(defines.events.on_player_configured_spider_remote, log_event)
Event.register(defines.events.on_player_crafted_item, log_event)
Event.register(defines.events.on_player_created, log_event)
Event.register(defines.events.on_player_cursor_stack_changed, log_event)
Event.register(defines.events.on_player_deconstructed_area, log_event)
Event.register(defines.events.on_player_demoted, log_event)
Event.register(defines.events.on_player_died, log_event)
Event.register(defines.events.on_player_display_resolution_changed, log_event)
Event.register(defines.events.on_player_display_scale_changed, log_event)
Event.register(defines.events.on_player_driving_changed_state, log_event)
Event.register(defines.events.on_player_dropped_item, log_event)
Event.register(defines.events.on_player_fast_transferred, log_event)
Event.register(defines.events.on_player_flushed_fluid, log_event)
Event.register(defines.events.on_player_gun_inventory_changed, log_event)
Event.register(defines.events.on_player_input_method_changed, log_event)
Event.register(defines.events.on_player_joined_game, log_event)
Event.register(defines.events.on_player_kicked, log_event)
Event.register(defines.events.on_player_left_game, log_event)
Event.register(defines.events.on_player_main_inventory_changed, log_event)
Event.register(defines.events.on_player_mined_entity, log_event)
Event.register(defines.events.on_player_mined_item, log_event)
Event.register(defines.events.on_player_mined_tile, log_event)
Event.register(defines.events.on_player_muted, log_event)
Event.register(defines.events.on_player_pipette, log_event)
Event.register(defines.events.on_player_placed_equipment, log_event)
Event.register(defines.events.on_player_promoted, log_event)
Event.register(defines.events.on_player_removed, log_event)
Event.register(defines.events.on_player_removed_equipment, log_event)
Event.register(defines.events.on_player_repaired_entity, log_event)
Event.register(defines.events.on_player_respawned, log_event)
Event.register(defines.events.on_player_reverse_selected_area, log_event)
Event.register(defines.events.on_player_rotated_entity, log_event)
Event.register(defines.events.on_player_selected_area, log_event)
Event.register(defines.events.on_player_set_quick_bar_slot, log_event)
Event.register(defines.events.on_player_setup_blueprint, log_event)
Event.register(defines.events.on_player_toggled_alt_mode, log_event)
Event.register(defines.events.on_player_toggled_map_editor, log_event)
Event.register(defines.events.on_player_trash_inventory_changed, log_event)
Event.register(defines.events.on_player_unbanned, log_event)
Event.register(defines.events.on_player_unmuted, log_event)
Event.register(defines.events.on_player_used_capsule, log_event)
Event.register(defines.events.on_player_used_spider_remote, log_event)
Event.register(defines.events.on_post_entity_died, log_event)
Event.register(defines.events.on_pre_build, log_event)
Event.register(defines.events.on_pre_chunk_deleted, log_event)
Event.register(defines.events.on_pre_entity_settings_pasted, log_event)
Event.register(defines.events.on_pre_ghost_deconstructed, log_event)
Event.register(defines.events.on_pre_ghost_upgraded, log_event)
Event.register(defines.events.on_pre_permission_group_deleted, log_event)
Event.register(defines.events.on_pre_permission_string_imported, log_event)
Event.register(defines.events.on_pre_player_crafted_item, log_event)
Event.register(defines.events.on_pre_player_died, log_event)
Event.register(defines.events.on_pre_player_left_game, log_event)
Event.register(defines.events.on_pre_player_mined_item, log_event)
Event.register(defines.events.on_pre_player_removed, log_event)
Event.register(defines.events.on_pre_player_toggled_map_editor, log_event)
Event.register(defines.events.on_pre_robot_exploded_cliff, log_event)
Event.register(defines.events.on_pre_script_inventory_resized, log_event)
Event.register(defines.events.on_pre_surface_cleared, log_event)
Event.register(defines.events.on_pre_surface_deleted, log_event)
Event.register(defines.events.on_research_cancelled, log_event)
Event.register(defines.events.on_research_finished, log_event)
Event.register(defines.events.on_research_reversed, log_event)
Event.register(defines.events.on_research_started, log_event)
Event.register(defines.events.on_resource_depleted, log_event)
Event.register(defines.events.on_robot_built_entity, log_event)
Event.register(defines.events.on_robot_built_tile, log_event)
Event.register(defines.events.on_robot_exploded_cliff, log_event)
Event.register(defines.events.on_robot_mined, log_event)
Event.register(defines.events.on_robot_mined_entity, log_event)
Event.register(defines.events.on_robot_mined_tile, log_event)
Event.register(defines.events.on_robot_pre_mined, log_event)
Event.register(defines.events.on_rocket_launch_ordered, log_event)
Event.register(defines.events.on_rocket_launched, log_event)
Event.register(defines.events.on_runtime_mod_setting_changed, log_event)
Event.register(defines.events.on_script_inventory_resized, log_event)
--Event.register(defines.events.on_script_path_request_finished, log_event)
Event.register(defines.events.on_script_trigger_effect, log_event)
Event.register(defines.events.on_sector_scanned, log_event)
Event.register(defines.events.on_selected_entity_changed, log_event)
Event.register(defines.events.on_spider_command_completed, log_event)
--Event.register(defines.events.on_string_translated, log_event)
Event.register(defines.events.on_surface_cleared, log_event)
Event.register(defines.events.on_surface_created, log_event)
Event.register(defines.events.on_surface_deleted, log_event)
Event.register(defines.events.on_surface_imported, log_event)
Event.register(defines.events.on_surface_renamed, log_event)
Event.register(defines.events.on_technology_effects_reset, log_event)
Event.register(defines.events.on_train_changed_state, log_event)
Event.register(defines.events.on_train_created, log_event)
Event.register(defines.events.on_train_schedule_changed, log_event)
Event.register(defines.events.on_trigger_created_entity, log_event)
Event.register(defines.events.on_trigger_fired_artillery, log_event)
Event.register(defines.events.on_unit_added_to_group, log_event)
Event.register(defines.events.on_unit_group_created, log_event)
Event.register(defines.events.on_unit_group_finished_gathering, log_event)
Event.register(defines.events.on_unit_removed_from_group, log_event)
Event.register(defines.events.on_worker_robot_expired, log_event)
Event.register(defines.events.script_raised_built, log_event)
Event.register(defines.events.script_raised_destroy, log_event)
Event.register(defines.events.script_raised_revive, log_event)
Event.register(defines.events.script_raised_set_tiles, log_event)
Event.register(defines.events.script_raised_teleported, log_event)
